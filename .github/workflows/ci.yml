name: CI Pipeline

permissions:
  contents: write
  pages: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432

    env:
      DATABASE_USER_URL: postgresql://testuser:testpass@localhost:5432/testdb
      DATABASE_TASKS_URL: postgresql://testuser:testpass@localhost:5432/testdb
      JWT_SECRET: test_secret
      NODE_ENV: test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies (root workspaces)
        run: npm ci

      - name: Generate Prisma client (user-service)
        run: npx prisma generate --schema services/user-service/prisma/schema.prisma

      - name: Generate Prisma client (todo-service)
        run: npx prisma generate --schema services/todo-service/prisma/schema.prisma

      - name: Run migrations (user-service)
        env:
          DATABASE_URL: ${{ env.DATABASE_USER_URL }}
        run: npx prisma migrate deploy --schema services/user-service/prisma/schema.prisma

      - name: Run migrations (todo-service)
        env:
          DATABASE_URL: ${{ env.DATABASE_TASKS_URL }}
        run: npx prisma migrate deploy --schema services/todo-service/prisma/schema.prisma

      - name: Build jwt lib first
        run: npm run -w @backendrestapi/jwt build

      - name: Build user-service
        run: npm run -w user-service build

      - name: Build todo-service
        run: npm run -w todo-service build

      - name: Run tests
        env:
          DATABASE_USER_URL: ${{ env.DATABASE_USER_URL }}
          DATABASE_TASKS_URL: ${{ env.DATABASE_TASKS_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
        run: npm test --workspaces --if-present

      - name: Generate HTML reports
        run: |
          npm run -w user-service test:html --if-present || echo "user-service test:html not present"
          npm run -w todo-service test:html --if-present || echo "todo-service test:html not present"
          npm run test:html --workspaces --if-present || echo "no root test:html workspace script"

      - name: Generate Test Reports Index
        run: |
          set -e
          
          rm -rf reports_publish || true
          mkdir -p reports_publish

          if [ -d "./reports" ]; then
            cp -a "./reports/." reports_publish/ || true
          fi

          for svc in services/*; do
            svcname=$(basename "$svc")
            if [ -d "$svc/reports" ]; then
              mkdir -p "reports_publish/$svcname"
              cp -a "$svc/reports/." "reports_publish/$svcname/" || true
            fi
          done

          if [ -z "$(ls -A reports_publish 2>/dev/null || true)" ]; then
            echo "<html><body style='font-family:system-ui; text-align:center; padding:50px'><h1>📊 No reports generated</h1></body></html>" > reports_publish/index.html
            exit 0
          fi

          cat > reports_publish/index.html <<'HTML'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Test Reports</title>
          </head>
          <body style="font-family:system-ui; max-width:800px; margin:0 auto; padding:20px">
            <h1 style="color:#333; border-bottom:2px solid #0066cc">📊 Test Reports</h1>
            <ul style="list-style:none; padding:0">
          HTML

          for d in reports_publish/*; do
            [ -d "$d" ] || continue
            svcname=$(basename "$d")
            idx=$(find "$d" -type f -name index.html | head -n 1 || true)
            
            if [ -n "$idx" ]; then
              # Make path relative to reports_publish root
              rel="${idx#reports_publish/}"
              echo "              <li style='margin:8px 0'><a href='./$rel' style='color:#0066cc; text-decoration:none'>🔍 $svcname — Test Report</a></li>" >> reports_publish/index.html
            fi
          done

          cat >> reports_publish/index.html <<'HTML'
            </ul>
          </body>
          </html>
          HTML

      - name: Upload test reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports_publish

      - name: Deploy reports to GitHub Pages (gh-pages)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./reports_publish
          publish_branch: gh-pages
      - name: Cleanup old deployments
        run: |
          # Keep only latest 8 deployments
          DEPLOYMENTS=$(gh api repos/${{ github.repository }}/deployments --jq '.[8:][].id' 2>/dev/null || echo "")
          
          if [ -z "$DEPLOYMENTS" ]; then
            echo "✅ Less than 8 deployments - nothing to clean"
            exit 0
          fi
          
          echo "🗑️ Cleaning up old deployments..."
          for id in $DEPLOYMENTS; do
            gh api repos/${{ github.repository }}/deployments/$id -X DELETE || echo "⚠️ Could not delete $id"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true