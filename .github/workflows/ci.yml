name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_USER_URL: postgresql://testuser:testpass@localhost:5432/testdb
      DATABASE_TASKS_URL: postgresql://testuser:testpass@localhost:5432/testdb
      JWT_SECRET: test_secret
      NODE_ENV: test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (root workspaces)
        run: npm ci

      - name: Generate Prisma client (user-service)
        run: npx prisma generate --schema services/user-service/prisma/schema.prisma

      - name: Generate Prisma client (todo-service)
        run: npx prisma generate --schema services/todo-service/prisma/schema.prisma

      # --- Migrations (per service, pass DATABASE_URL) ---
      - name: Run migrations (user-service)
        env:
          DATABASE_URL: ${{ env.DATABASE_USER_URL }}
        run: npx prisma migrate deploy --schema services/user-service/prisma/schema.prisma

      - name: Run migrations (todo-service)
        env:
          DATABASE_URL: ${{ env.DATABASE_TASKS_URL }}
        run: npx prisma migrate deploy --schema services/todo-service/prisma/schema.prisma

      - name: Build all packages
        run: npm run build --workspaces --if-present

      - name: Run tests
        env:
          DATABASE_USER_URL: ${{ env.DATABASE_USER_URL }}
          DATABASE_TASKS_URL: ${{ env.DATABASE_TASKS_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
        run: npm test --workspaces --if-present
